import requests
import csv
import time
from datetime import datetime
import os
import re
import concurrent.futures
from threading import Lock


class GitHubAnalyzer:
    def __init__(self, token=None, max_workers=5):
        self.base_url = "https://api.github.com"
        self.headers = {
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "GitHub-Repo-Analyzer"
        }

        self.token = token
        if token:
            self.headers["Authorization"] = f"token {token}"

        self.session = requests.Session()
        self.session.headers.update(self.headers)
        self.max_workers = max_workers
        self.lock = Lock()

        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.corporate_owners = {
            'google', 'microsoft', 'facebook', 'apple', 'amazon', 'netflix',
            'twitter', 'linkedin', 'uber', 'airbnb', 'spotify', 'docker',
            'mozilla', 'adobe', 'oracle', 'ibm', 'intel', 'nvidia', 'github',
            'apache', 'kubernetes', 'elastic', 'mongodb', 'redis'
        }

        self.educational_keywords = {
            'university', 'college', 'edu', 'academy', 'school', 'course',
            'tutorial', 'learning', 'bootcamp', 'curriculum', 'assignment',
            'homework', 'student', 'coursera', 'udemy', 'udacity', 'edx',
            'lab-', 'project-', 'exercise', 'workshop', 'training'
        }

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ-–ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—Å–∫–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        self.non_tech_keywords = {
            'book', 'books', 'paper', 'papers', 'article', 'articles',
            'curriculum', 'syllabus', 'lecture', 'lectures', 'notes',
            'resource', 'resources', 'list', 'awesome', 'collection',
            'interview', 'interview-questions', 'cheatsheet', 'cheat-sheet',
            'guide', 'tutorial', 'learning', 'study', 'studying',
            'blog', 'blog-posts', 'writing', 'documentation', 'roadmap', "public API\'s"
        }

        # –°—á–µ—Ç—á–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.search_remaining = 30
        self.core_remaining = 5000

    def get_commit_count(self, owner, repo):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        url = f"{self.base_url}/repos/{owner}/{repo}/commits"
        params = {
            "per_page": 1
        }

        response = self.make_request(url, params=params)
        if response.status_code != 200:
            return 0

        link_header = response.headers.get('Link', '')
        if link_header:
            last_match = re.search(r'page=(\d+)>; rel="last"', link_header)
            if last_match:
                return int(last_match.group(1))

        commits = response.json()
        return len(commits) if isinstance(commits, list) else 0

    def is_technical_repository(self, repo_data):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º (–∏–º–µ–µ—Ç —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        language = repo_data.get('language')
        if not language or language in ["Markdown", "HTML"]:
            print(f"–ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è - {repo_data['full_name']}")
            return False

        description = self.safe_lower(repo_data.get('description', ''))
        repo_name = self.safe_lower(repo_data.get('name', ''))

        repo_text = f"{repo_name} {description}"

        non_tech_indicators = sum(1 for keyword in self.non_tech_keywords if keyword in repo_text)
        if non_tech_indicators >= 2:
            print(f"–ü—Ä–æ–ø—É—Å–∫: –Ω–µ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç - {repo_data['full_name']}")
            return False

        if self.is_likely_non_tech(repo_data):
            print(f"–ü—Ä–æ–ø—É—Å–∫: –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π - {repo_data['full_name']}")
            return False

        return True

    def is_likely_non_tech(self, repo_data):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º"""
        full_name = self.safe_lower(repo_data.get('full_name', ''))
        description = self.safe_lower(repo_data.get('description', ''))

        known_non_tech_repos = {
            'awesome', 'awesome-list', 'interview', 'books', 'paper',
            'curriculum', 'syllabus', 'lecture-notes', 'javascript-algorithms'
        }

        for non_tech_repo in known_non_tech_repos:
            if non_tech_repo in full_name:
                return True

        non_tech_patterns = [
            r'awesome.*list',
            r'curriculum',
            r'syllabus',
            r'lecture.*notes',
            r'interview.*questions',
            r'book.*collection'
        ]

        text_to_check = f"{full_name} {description}"
        for pattern in non_tech_patterns:
            if re.search(pattern, text_to_check):
                return True

        return False

    def safe_lower(self, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        if text is None:
            return ""
        return str(text).lower()

    def determine_repo_type(self, repo_data):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        owner = repo_data.get('owner', {})
        owner_login = self.safe_lower(owner.get('login', ''))
        organization = self.safe_lower(repo_data.get('organization', ''))
        repo_name = self.safe_lower(repo_data.get('name', ''))
        description = self.safe_lower(repo_data.get('description', ''))

        if owner_login in self.corporate_owners or (organization is not None and len(organization) > 0):
            return "corporate"

        repo_text = f"{repo_name} {description}"
        edu_indicators = sum(1 for keyword in self.educational_keywords if keyword in repo_text)
        if edu_indicators >= 2:
            return "educational"

        topics = repo_data.get('topics', [])
        if topics:
            topics_lower = [self.safe_lower(topic) for topic in topics]
            edu_topics = {'education', 'learning', 'tutorial', 'course', 'students'}
            if any(topic in topics_lower for topic in edu_topics):
                return "educational"

        return "individual"

    def wait_for_rate_limit(self, reset_time):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞"""
        current_time = time.time()
        sleep_time = max(reset_time - current_time, 0) + 10  # +10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

        if sleep_time > 300:  # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
            print(f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {sleep_time / 60:.1f} –º–∏–Ω—É—Ç")
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            for i in range(int(sleep_time / 60)):
                remaining = sleep_time - i * 60
                print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {remaining / 60:.1f} –º–∏–Ω—É—Ç")
                time.sleep(60)
            time.sleep(sleep_time % 60)
        else:
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {sleep_time:.0f} —Å–µ–∫—É–Ω–¥")
            time.sleep(sleep_time)

    def make_request(self, url, params=None, is_search=False):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π rate limit"""
        try:
            response = self.session.get(url, params=params, timeout=30)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if 'X-RateLimit-Remaining' in response.headers:
                remaining = int(response.headers['X-RateLimit-Remaining'])
                if is_search:
                    self.search_remaining = remaining
                else:
                    self.core_remaining = remaining

            if response.status_code == 403:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ rate limit, –∞ –Ω–µ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ 403
                rate_limit_remaining = response.headers.get('X-RateLimit-Remaining')
                reset_time = response.headers.get('X-RateLimit-Reset')

                if rate_limit_remaining == '0' and reset_time:
                    # –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ rate limit
                    reset_time = int(reset_time)
                    limit_type = "Search API" if is_search else "Core API"
                    print(f"üö´ {limit_type} limit –ø—Ä–µ–≤—ã—à–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {rate_limit_remaining}")
                    self.wait_for_rate_limit(reset_time)
                    return self.make_request(url, params, is_search)
                else:
                    # –≠—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ 403 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)
                    print(f"üö´ –û—à–∏–±–∫–∞ 403: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {url}")
                    print(f"   Response: {response.text[:200]}...")
                    return response

            elif response.status_code == 422:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ 422 (Unprocessable Entity) –¥–ª—è {url}")
                return response

            elif response.status_code != 200:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {url}")
                print(f"   Response: {response.text[:200]}...")
                return response

            return response

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            time.sleep(5)
            return self.make_request(url, params, is_search)

    def get_all_contributors(self, owner, repo, max_contributors=50, min_contributions=100):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤"""
        contributors = []
        page = 1

        while len(contributors) < max_contributors:
            url = f"{self.base_url}/repos/{owner}/{repo}/contributors"
            params = {
                "page": page,
                "per_page": 100,
                "anon": "0"
            }

            response = self.make_request(url, params=params)
            if response.status_code != 200:
                break

            page_contributors = response.json()
            if not page_contributors:
                break

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤
            filtered_contributors = [
                contributor for contributor in page_contributors
                if contributor.get('contributions', 0) >= min_contributions
            ]

            contributors.extend(filtered_contributors)

            if len(page_contributors) < 100:
                break

            page += 1
            time.sleep(0.1)

        print(
            f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤: {len(contributors)} (–º–∏–Ω–∏–º—É–º {min_contributions} –∫–æ–º–º–∏—Ç–æ–≤)")
        return contributors[:max_contributors]
    def get_user_commits(self, owner, repo, username, max_commits=5):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        commits = []
        page = 1

        while len(commits) < max_commits:
            url = f"{self.base_url}/repos/{owner}/{repo}/commits"
            params = {
                "author": username,
                "page": page,
                "per_page": 10
            }

            response = self.make_request(url, params=params)
            if response.status_code != 200:
                break

            page_commits = response.json()
            if not page_commits:
                break

            for commit in page_commits:
                if isinstance(commit, dict) and 'commit' in commit:
                    commit_info = commit['commit']
                    author_info = commit_info.get('author', {})

                    raw_date = author_info.get('date', '')
                    formatted_date = self.format_date(raw_date)

                    commits.append({
                        'sha': commit.get('sha', '')[:8],  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
                        'date': formatted_date,
                        'message': self.clean_commit_message(commit_info.get('message', ''))
                    })

                    if len(commits) >= max_commits:
                        break

            if len(page_commits) < 10:
                break

            page += 1
            time.sleep(0.2)

        return commits

    def format_date(self, date_string):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if not date_string:
            return "N/A"

        try:
            dt = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            return dt.strftime("%Y-%m-%d %H:%M:%S")
        except:
            return date_string

    def clean_commit_message(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not message:
            return "N/A"

        cleaned = re.sub(r'\s+', ' ', message.strip())
        if len(cleaned) > 200:
            cleaned = cleaned[:197] + "..."

        return cleaned

    def get_popular_repositories(self, count=30, min_commits=1000):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–º–∏—Ç–æ–≤)"""
        repos = []
        page = 1
        per_page = min(50, count * 3)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ, —Ç.–∫. –±—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å

        while len(repos) < count:
            url = f"{self.base_url}/search/repositories"
            params = {
                "q": "stars:>1000",
                "sort": "stars",
                "order": "desc",
                "page": page,
                "per_page": per_page
            }

            response = self.make_request(url, params=params)
            if response.status_code != 200:
                break

            data = response.json()
            if "items" not in data:
                break

            for repo in data["items"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                if not self.is_technical_repository(repo):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
                owner = repo['owner']['login']
                repo_name = repo['name']
                print(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {owner}/{repo_name}...")

                commit_count = self.get_commit_count(owner, repo_name)
                repo['commit_count'] = commit_count

                if commit_count >= min_commits:
                    repos.append(repo)
                    print(
                        f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo['full_name']} ({commit_count} –∫–æ–º–º–∏—Ç–æ–≤, {repo.get('language', 'No language')})")
                else:
                    print(f"–ü—Ä–æ–ø—É—â–µ–Ω: –º–∞–ª–æ –∫–æ–º–º–∏—Ç–æ–≤ ({commit_count} < {min_commits}) - {repo['full_name']}")

                if len(repos) >= count:
                    break

            if len(data["items"]) < per_page:
                break

            page += 1
            time.sleep(1)

            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repos)}/{count}")

        return repos[:count]

    def process_single_contributor(self, contributor_data):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        repo_info, contributor = contributor_data
        results = []

        if isinstance(contributor, dict) and 'login' in contributor:
            username = contributor['login']
            owner = repo_info['owner_login']
            repo_name = repo_info['repo_name'].split('/')[1] if '/' in repo_info['repo_name'] else repo_info[
                'repo_name']

            user_info = self.get_user_info(username)
            location = user_info.get('location', 'Unknown')
            if not location:
                return []

            print(f"    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {username}...")
            commits = self.get_user_commits(owner, repo_name, username, max_commits=1000)

            if commits:
                for commit in commits:
                    result = {
                        'repo_id': repo_info['id'],
                        'repo_name': repo_info['repo_name'],
                        'repo_type': repo_info['repo_type'],
                        'contributor_login': username,
                        'contributor_location': location,
                        'contributions': contributor.get('contributions', 0),
                        'commit_sha': commit['sha'],
                        'commit_date': commit['date'],
                        'commit_message': commit['message']
                    }
                    results.append(result)
            else:
                # –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–∞—Ö
                result = {
                    'repo_id': repo_info['id'],
                    'repo_name': repo_info['repo_name'],
                    'repo_type': repo_info['repo_type'],
                    'contributor_login': username,
                    'contributor_location': location,
                    'contributions': contributor.get('contributions', 0),
                    'commit_sha': 'N/A',
                    'commit_date': 'N/A',
                    'commit_message': 'N/A'
                }
                results.append(result)

            with self.lock:
                print(f"    –û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä: {username} ({len(commits)} –∫–æ–º–º–∏—Ç–æ–≤)")

        return results

    def get_user_info(self, username):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        url = f"{self.base_url}/users/{username}"
        response = self.make_request(url)
        if response.status_code == 200:
            return response.json()
        return {"location": "Unknown"}

    def analyze_repository_contributors(self, repo):
        """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –µ–≥–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤"""
        repo_id = repo['id']
        repo_name = repo['full_name']
        owner = repo['owner']['login']
        commit_count = repo.get('commit_count', 0)

        print(f"–ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_name} ({repo.get('language', 'No language')}, {commit_count} –∫–æ–º–º–∏—Ç–æ–≤)")

        repo_type = self.determine_repo_type(repo)
        print(f"  –¢–∏–ø: {repo_type}")

        contributors = self.get_all_contributors(owner, repo['name'], max_contributors=50)
        print(f"  –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤: {len(contributors)}")

        repo_info = {
            'id': repo_id,
            'repo_name': repo_name,
            'repo_type': repo_type,
            'owner_login': owner,
            'stargazers_count': repo.get('stargazers_count', 0),
            'commit_count': commit_count
        }

        contributor_data = [(repo_info, contributor) for contributor in contributors]

        return contributor_data

    def analyze_repositories_parallel(self, repo_count=30, min_commits=1000):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏–µ–º"""
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        print(
            f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±–µ–∑ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–±–æ—Ä–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å < {min_commits} –∫–æ–º–º–∏—Ç–æ–≤")

        repositories = self.get_popular_repositories(repo_count, min_commits)

        all_results = []
        total_contributors = 0

        print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(repositories)} –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")

        all_contributor_data = []

        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            future_to_repo = {executor.submit(self.analyze_repository_contributors, repo): repo for repo in
                              repositories}

            for future in concurrent.futures.as_completed(future_to_repo):
                try:
                    contributor_data = future.result()
                    all_contributor_data.extend(contributor_data)
                    total_contributors += len(contributor_data)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")

        print(f"\n–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_contributors}")

        print("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤...")

        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            futures = [executor.submit(self.process_single_contributor, data) for data in all_contributor_data]

            for i, future in enumerate(concurrent.futures.as_completed(futures)):
                try:
                    results = future.result()
                    if not results:
                        continue
                    all_results.extend(results)

                    if i % 5 == 0:  # –†–µ–∂–µ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑-–∑–∞ –±–æ–ª—å—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤: {i + 1}/{len(futures)}")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞: {e}")

        return all_results

    def save_to_csv(self, data, filename="github_analysis.csv"):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV"""
        if not data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        fieldnames = [
            'repo_id', 'repo_name', 'repo_type', 'contributor_login',
            'contributor_location', 'contributions', 'commit_sha',
            'commit_date', 'commit_message'
        ]

        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data)

        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")

        commits_with_data = len([item for item in data if item['commit_sha'] != 'N/A'])
        commits_without_data = len([item for item in data if item['commit_sha'] == 'N/A'])

        print(f"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ú–ò–¢–û–í:")
        print(f"–ó–∞–ø–∏—Å–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–º–∏—Ç–∞—Ö: {commits_with_data}")
        print(f"–ó–∞–ø–∏—Å–µ–π –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–∞—Ö: {commits_without_data}")


def main():
    token = (
            os.getenv('GITHUB_TOKEN') or
            os.getenv('GH_TOKEN') or
            input("–í–≤–µ–¥–∏—Ç–µ GitHub Token: ").strip()
    )

    if not token:
        print("–¢–æ–∫–µ–Ω –Ω–µ –≤–≤–Ω–¥—ë–Ω.")
        return
    else:
        repo_count = 10
        max_workers = 5

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    min_commits = 1000

    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {max_workers} –ø–æ—Ç–æ–∫–æ–≤")
    print("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å ‚â• {min_commits} –∫–æ–º–º–∏—Ç–∞–º–∏")
    print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –∫–æ–º–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞")

    analyzer = GitHubAnalyzer(token, max_workers=max_workers)

    try:
        start_time = time.time()
        print("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")

        data = analyzer.analyze_repositories_parallel(repo_count, min_commits)

        end_time = time.time()
        print(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"github_commits_analysis_{timestamp}.csv"
        analyzer.save_to_csv(data, filename)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if data:
            unique_repos = len(set(item['repo_id'] for item in data))
            unique_contributors = len(set(item['contributor_login'] for item in data))

            print(f"\n–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {unique_repos}")
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤: {unique_contributors}")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()